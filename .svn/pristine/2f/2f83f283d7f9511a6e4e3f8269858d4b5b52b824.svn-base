package com.zycus.eInvoice.Invoice;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import com.relevantcodes.extentreports.ExtentTest;
import com.zycus.eProc.CheckoutPg;
import com.zycus.eProc.CreateReceipt_page;
import com.zycus.eProc.Requisition.RequisitionSubmitPg;

import Common.eInvoice_CommonFunctions;

public class PurchaseOrder extends eInvoice_CommonFunctions{

	private WebDriver driver;
	
	private By POHeader 	= By.xpath("//h1[@class='pgHead']");
	
	private By processingLoader 		   = By.id("invoicelisting_processing");
	private By statusXpath 				   = By.xpath("//table[@id='polisting']//td[2]/div");
	private By dateXpath 				   = By.xpath("//table[@id='polisting']//td[contains(@class,'invoiceDate')]");
	private By amountXpath 				   = By.xpath("//table[@id='polisting']//td[contains(@class,'totalAmountReq')]");
	private By filterBtnXpath 			   = By.xpath("//div[contains(@id,'qtip') and @aria-hidden='false']//div[contains(@class,'FilterBtnbx')]//a[text()='Filter']");
	private By actionsLinkXpath	   		   = By.xpath("(//*[@id='reqList']//a[@class='icon actLnk'])[1]");
	
	private By PONumTxtXpath	   = By.xpath("(//table[@id='polisting']//td[2]/a)[1]");

	private ExtentTest logger;
	
	
	public PurchaseOrder(WebDriver driver) {
		super(driver);
		this.driver = driver;
	}

	/**
	 * @return the pOHeader
	 */
	public By getPOHeader() {
		return POHeader;
	}

	/**
	 * @param pOHeader the pOHeader to set
	 */
	public void setPOHeader(By pOHeader) {
		POHeader = pOHeader;
	}
	
	
	/**
	 *--------------------------------------------------------------------------------- 
	 * Function : filterByStatus
	 * @param typeValue
	 * @return result
	 * ---------------------------------------------------------------------------------
	 * @throws Exception 
	 */
	
	
	public boolean filterByStatus(String checkBoxLbl) throws Exception{
		boolean result = false;
		
		click(By.xpath("//th[contains(@class,'postatusFltrHdr')]//b"));
		filterByChkbox(checkBoxLbl);
		if(findElement(processingLoader).getAttribute("style").contains("block")){
			List<WebElement> objfilteredList = driver.findElements(statusXpath);
			for(WebElement obj:objfilteredList){
				if(obj.getText().equals(checkBoxLbl))
					result =  true;
				else{
					result =  false;
					break;
				}
			}
		}
		return result;
	}
	
	public boolean filterByType(String checkBoxLbl) throws Exception{
		boolean result = false;
		
		click(By.xpath("//th[contains(@class,'potypeFltrHdr')]//b"));
		filterByChkbox(checkBoxLbl);
		if(findElement(processingLoader).getAttribute("style").contains("block")){
			List<WebElement> objfilteredList = driver.findElements(statusXpath);
			for(WebElement obj:objfilteredList){
				if(obj.getText().equals(checkBoxLbl))
					result =  true;
				else{
					result =  false;
					break;
				}
			}
		}
		return result;
	}
	
	
	public boolean filterByPODate(Date fromDt, Date ToDt) throws Exception{
		boolean result = false;
		
		click(By.xpath("//th[contains(@class,'podateFltrHdr')]//b"));
		filterByDateRange(fromDt, ToDt);
		if(findElement(processingLoader).getAttribute("style").contains("block")){
			List<WebElement> objfilteredDateList = driver.findElements(dateXpath);
			for(WebElement obj:objfilteredDateList){
				DateFormat format = new SimpleDateFormat("dd/mm/yyyy");
				Date dt = format.parse(obj.getText()); 
				if(dt.compareTo(fromDt)>=0 && dt.compareTo(ToDt)<=0)
					result =  true;
				else{
					result =  false;
					break;
				}
			}
		}
		return result;
	}
	
	
	private boolean filterByAmountRange(float fromAmt, float ToAmt, String currType) throws ParseException{
		boolean result = false;		
		
		super.filterByAmtRange(fromAmt, ToAmt, currType);
		if(findElement(processingLoader).getAttribute("style").contains("block")){
			List<WebElement> objfilteredAmtList = driver.findElements(amountXpath);
			for(WebElement obj:objfilteredAmtList){
				Float amount = Float.parseFloat((obj.getText().split(" "))[1]);
				String currencyType = null;
				if(amount >= fromAmt && amount <= ToAmt){
					if(currType!="")
						currencyType = (obj.getText().split(" "))[0];
						if(currencyType == currType)
							result =  true;
					else
						result =  true;
				}else{
					result =  false;
					break;
				}
			}
		}
		return result;
	}
	
	public boolean filterByAmount(float fromAmt, float ToAmt) throws Exception{
		boolean result = false;
		click(By.xpath("//th[contains(@class,'poamountFltrHdr')]//b"));
		if(filterByAmountRange(fromAmt, ToAmt, ""))
			result = true;
		else
			result = false;
		return result;
	}
	
	
	public boolean filterByAmount(float fromAmt, float ToAmt, String currType) throws Exception{
		boolean result = false;		
		click(By.xpath("//th[contains(@class,'poamountFltrHdr')]//b"));
		if(filterByAmountRange(fromAmt, ToAmt, ""))
			result = true;
		else
			result = false;
		return result;
	}
	
	
	public boolean filterByPONumber(String PONumber) throws ParseException{
		boolean result = false;	
		if(filterByText("PO Number", PONumber))
			result = true;
		else
			result = false;
		return result;
	}	
	
	public boolean filterBySupplier(String supplier) throws ParseException{
		boolean result = false;	
		if(filterByText("Supplier", supplier))
			result = true;
		else
			result = false;
		return result;
	}
	
	public boolean filterByBuyer(String buyer) throws ParseException{
		boolean result = false;	
		if(filterByText("Buyer", buyer))
			result = true;
		else
			result = false;
		return result;
	}
	
	/**
	 * ---------------------------------------------------------------------------------
	 * Function : verifyDisplayedAction
	 * @param action
	 * @return result
	 * ---------------------------------------------------------------------------------
	 */
	
	protected boolean verifyDisplayedAction(String action){
		boolean result = false;
		
		String status = findElement(By.xpath("//table[@id='polisting']//td[1]/div")).getText();
		switch(action){
			case "Add Credit Memo":
				if(status.equals("Released"))
					result =  true;
				break;
			case "Add Invoice":
				if(status.equals("Released"))
					result =  true;
				break;
			case "Download":
				if(status.equals("Closed"))
					result =  true;
				break;
			case "View":
				if(status.equals("Expired"))
					result =  true;
				break;
		}
		return result;
	}
	
	/**
	 * ---------------------------------------------------------------------------------
	 * Function : takeAction
	 * @param action
	 * @return result
	 * ---------------------------------------------------------------------------------
	 *//*
	
	public boolean takeAction(String action){
		boolean result = false;
		
		click(actionsLinkXpath);
		click(By.xpath("(//*[@id='polisting']//a[@class='icon actLnk'])[1]/following-sibling::ul//a[text()='"+action+"']"));
		
		if(verifyDisplayedAction(action)){
			
			WebElement objPONum = findElement(PONumTxtXpath);
			String PONum = objPONum.getText(); 
			
			switch(action){
			
				case "Add credit Memo":
					PO_CreditMemo objCreateMemo = new PO_CreditMemo(driver);
					if(findElement(objCreateMemo.getCreditMemoHeader()).getText().equals(PONum))
						result = true;
					else{
						System.out.println("Requested Requisition not opened for Create Receipt");
						result = false;
					}
					break;
				
				case "Delete":
					if(findElement(DeletePopUpXpath).getAttribute("style").contains("block"))
						click(DeletePopUpYesLink);
					if(findElement(processingLoader).getAttribute("style").contains("block")){
						WebElement objDeletedReqNum = findElement(By.xpath("//table[@id='reqList']//td[2]/a[text()='"+requisitionNum+"']"));
						if(objDeletedReqNum == null)
							result = true;
						else{
							System.out.println("Deleted Requisition still exists");
							result = false;
						}
					}else
						System.out.println("Are you sure want to delete this requisition - message not displayed");
					break;
				case "Edit":
					CheckoutPg objReqCheckout = new CheckoutPg(driver, logger);
					if(findElement(objReqCheckout.getRequisitionNm()).getAttribute("value") == requisitionName)
						result = true;
					else{
						System.out.println("Requested Requisition not opened for editing");
						result = false;
					}
					break;
				case "Review and submit":
					RequisitionSubmitPg objReqSubmit = new RequisitionSubmitPg(driver, logger);
					if(findElement(objReqSubmit.getRequisitionName()).getText() == requisitionName)
						result = true;
					else{
						System.out.println("Requested Requisition not opened for review & submit");
						result = false;
					}
					break;
				case "Create Receipt":
					CreateReceipt_page objCreateReceipt = new CreateReceipt_page(driver, logger);
					if(findElement(objCreateReceipt.getHeaderReqNum()).getText() == requisitionNum && findElement(objCreateReceipt.getHeaderReqName()).getText() == requisitionName)
						result = true;
					else{
						System.out.println("Requested Requisition not opened for Create Receipt");
						result = false;
					}
					break;
				case "Remind Approver":
					if(findElement(reminderMsgSentXpath)!=null)
						result = true;
					else{
						System.out.println("Reminder message has been sent not displayed");
						result = false;
					}	
					break;
				case "Copy":
					if(findElement(By.xpath("//div[div//td[contains(text(),'Items from"+objRequisitionNum+"will be added to the shopping cart')]]")).getAttribute("style").contains("block")){
						
						Add code for clicking 'Proceed only with Req items'
						
						click(By.xpath("//div[div//td[contains(text(),'Items from"+objRequisitionNum+"will be added to the shopping cart')]]//button/span[text()='Proceed with Req & existing cart items']"));
						CheckoutPg objReqCheckout1 = new CheckoutPg(driver, logger);
						if(findElement(objReqCheckout1.getRequisitionNm()).getAttribute("value") == requisitionName)
							result =  true;
						else{
							System.out.println("Requested Requisition not opened for editing");
							result =  false;
						}
					}else{
						System.out.println("Requested Requisition not opened for editing");
						result =  false;
						}
					break;
			}
		}else
			System.out.println("Requisition is not in required status for the requested action");
		return result;
		
	}
	
	*//**
	 * ---------------------------------------------------------------------------------
	 * Function : takeAction
	 * @param action
	 * @param actionBasedReq_Comment
	 * @return result
	 * ---------------------------------------------------------------------------------
	 *//*
	
	public boolean takeAction(String action, String actionBasedReq_Comment){
		boolean result = false;
		
		click(actionsLinkXpath);
		click(By.xpath("(//*[@id='reqList']//a[@class='icon actLnk'])[1]/following-sibling::ul//a[text()='"+action+"']"));
		
		if(verifyDisplayedAction(action)){
			
			WebElement objRequisitionNum = findElement(requisitionNumTxtXpath);
			String requisitionNum = objRequisitionNum.getText(); 
			
			switch(action){
				case "Recall approval request":
					if(findElement(recallApprovalReqPopUp) != null){
						sendKeys(recallApprovalCmmntId, actionBasedReq_Comment);
						click(recallBtnId);
						if(findElement(recallReqActionMsgId) != null){
							WebElement objRecalledReqNum = findElement(By.xpath("//table[@id='reqList']//td[2]/a[text()='"+requisitionNum+"']"));
							if(objRecalledReqNum==null)
								result =  true;
						}
					}else{
						System.out.println("Recall Approval Request pop up not displayed");
						result =  false;
					}
					break;
				case "Close":
					if(findElement(closeReqPopUp) != null){
						sendKeys(closeCmmntId, actionBasedReq_Comment);
						click(closeBtnId);
						
						//Add code for validating the closed Requisition
						if(findElement(By.id("status_overlay_savingComment"))!=null){
							WebElement objRecalledReqNum = findElement(By.xpath("//table[@id='reqList']//td[2]/a[text()='"+requisitionNum+"']"));
							if(objRecalledReqNum==null)
								result =  true;
						}
						
					}else{
						System.out.println("Recall Approval Request pop up not displayed");
						result =  false;
					}
					break;
			}
		}else
			System.out.println("Requisition is not in required status for the requested action");
		return result;
	}*/

}
