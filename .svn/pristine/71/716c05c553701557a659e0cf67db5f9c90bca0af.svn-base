package com.zycus.eInvoice.Invoice;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import Common.eInvoice_CommonFunctions;

public class Invoices extends eInvoice_CommonFunctions{

	private WebDriver driver;
	
	private By processingLoader 		   = By.id("invoicelisting_processing");
	private By statusXpath 				   = By.xpath("//table[@id='invoicelisting']//td[2]/div");
	private By dateXpath 				   = By.xpath("//table[@id='invoicelisting']//td[contains(@class,'invoiceDate')]");
	private By amountXpath 				   = By.xpath("//table[@id='invoicelisting']//td[contains(@class,'totalAmountReq')]");
	private By filterBtnXpath 				= By.xpath("//div[contains(@id,'qtip') and @aria-hidden='false']//div[contains(@class,'FilterBtnbx')]//a[text()='Filter']");
	
	private By statusTxtXpath	   		   = By.xpath("(//table[@id='invoicelisting']//td[2]/div)[1]");
	private By actionsLinkXpath	   		   = By.xpath("(//*[@id='invoicelisting']//a[@class='icon actLnk'])[1]");
	private By requisitionNumTxtXpath	   = By.xpath("(//table[@id='invoicelisting']//td[3]/a)[1]");
	private By requisitionNameTxtXpath	   = By.xpath("(//table[@id='invoicelisting']//td[4])[1]");
	

	public Invoices(WebDriver driver) {
		super(driver);
		this.driver = driver;
	}
	
	
	/**
	 *--------------------------------------------------------------------------------- 
	 * Function : filterByStatus
	 * @param typeValue
	 * @return result
	 * ---------------------------------------------------------------------------------
	 * @throws Exception 
	 */
	
	
	public boolean filterByStatus(String checkBoxLbl) throws Exception{
		boolean result = false;
		
		click(By.xpath("//th[contains(@class,'invstatusFltrHdr')]//b"));
		filterByChkbox(checkBoxLbl);
		if(findElement(processingLoader).getAttribute("style").contains("block")){
			List<WebElement> objfilteredList = driver.findElements(statusXpath);
			for(WebElement obj:objfilteredList){
				if(obj.getText().equals(checkBoxLbl))
					result =  true;
				else{
					result =  false;
					break;
				}
			}
		}
		return result;
	}
	
	
	private boolean filterByDate(Date fromDt, Date ToDt) throws ParseException{
		boolean result = false;
		
		filterByDateRange(fromDt, ToDt);
		if(findElement(processingLoader).getAttribute("style").contains("block")){
			List<WebElement> objfilteredDateList = driver.findElements(dateXpath);
			for(WebElement obj:objfilteredDateList){
				DateFormat format = new SimpleDateFormat("dd/mm/yyyy");
				Date dt = format.parse(obj.getText()); 
				if(dt.compareTo(fromDt)>=0 && dt.compareTo(ToDt)<=0)
					result =  true;
				else{
					result =  false;
					break;
				}
			}
		}
		return result;
	}
	
	
	/**
	 * --------------------------------------------------------------------------------- 
	 * Function : filterByDocumentDt
	 * @param typeValue
	 * @return result
	 * @throws Exception 
	 */
	
	
	public boolean filterByDocumentDt(Date fromDt, Date ToDt) throws Exception{
		boolean result = false;
		
		click(By.xpath("//th[contains(@class,'invdateFltrHdr')]//b"));
		if(filterByDate(fromDt, ToDt))
			result =  true;
		else
			result =  false;
		return result;
	}
	
	public boolean filterByDueDt(Date fromDt, Date ToDt) throws Exception{
		boolean result = false;
		
		click(By.xpath("//th[contains(@class,'invduedateFltrHdr')]//b"));
		if(filterByDate(fromDt, ToDt))
			result =  true;
		else
			result =  false;
		return result;
	}
	
	
	private boolean filterByAmountRange(float fromAmt, float ToAmt, String currType) throws ParseException{
		boolean result = false;		
		
		super.filterByAmtRange(fromAmt, ToAmt, currType);
		if(findElement(processingLoader).getAttribute("style").contains("block")){
			List<WebElement> objfilteredAmtList = driver.findElements(amountXpath);
			for(WebElement obj:objfilteredAmtList){
				Float amount = Float.parseFloat((obj.getText().split(" "))[1]);
				String currencyType = null;
				if(amount >= fromAmt && amount <= ToAmt){
					if(currType!="")
						currencyType = (obj.getText().split(" "))[0];
						if(currencyType == currType)
							result =  true;
					else
						result =  true;
				}else{
					result =  false;
					break;
				}
			}
		}
		return result;
	}
	
	public boolean filterByAmount(float fromAmt, float ToAmt) throws Exception{
		boolean result = false;
		click(By.xpath("//th[contains(@class,'invamountFltrHdr')]//b"));
		if(filterByAmountRange(fromAmt, ToAmt, ""))
			result = true;
		else
			result = false;
		return result;
	}
	
	
	public boolean filterByAmount(float fromAmt, float ToAmt, String currType) throws Exception{
		boolean result = false;		
		click(By.xpath("//th[contains(@class,'invamountFltrHdr')]//b"));
		if(filterByAmountRange(fromAmt, ToAmt, ""))
			result = true;
		else
			result = false;
		return result;
	}
	
	public boolean filterByPaidAmount(float fromAmt, float ToAmt) throws Exception{
		boolean result = false;
		click(By.xpath("//th[contains(@class,'invpaidamountFltrHdr')]//b"));
		if(filterByAmountRange(fromAmt, ToAmt, ""))
			result = true;
		else
			result = false;
		return result;
	}
	
	
	public boolean filterByPaidAmount(float fromAmt, float ToAmt, String currType) throws Exception{
		boolean result = false;		
		click(By.xpath("//th[contains(@class,'invpaidamountFltrHdr')]//b"));
		if(filterByAmountRange(fromAmt, ToAmt, ""))
			result = true;
		else
			result = false;
		return result;
	}
	
	public boolean filterBySupplier(String supplier) throws ParseException{
		boolean result = false;	
		if(filterByText("Supplier", supplier))
			result = true;
		else
			result = false;
		return result;
	}
	
	public boolean filterByDocType(String checkBoxLbl) throws Exception{
		boolean result = false;
		
		click(By.xpath("//th[contains(@class,'docTypeFltrHdr')]//b"));
		filterByChkbox(checkBoxLbl);
		if(findElement(processingLoader).getAttribute("style").contains("block")){
			List<WebElement> objfilteredList = driver.findElements(statusXpath);
			for(WebElement obj:objfilteredList){
				if(obj.getText().equals(checkBoxLbl))
					result =  true;
				else{
					result =  false;
					break;
				}
			}
		}
		return result;
	}
	
	
	public boolean filterByReference(String checkBoxLbl, String optionTxt) throws Exception{
		boolean result = false;
		
		click(By.xpath("//th[contains(@class,'invPoNumFltrHdr')]//b"));
		findElement(By.xpath("(//div[contains(@id,'qtip')]//input[following-sibling::text()[contains(.,'"+checkBoxLbl+"')]])[1]")).click();
		if(checkBoxLbl == "PO")
			sendKeys(By.id("txtFltrPoNum"), optionTxt);
		findElement(filterBtnXpath).click();
		
		if(findElement(processingLoader).getAttribute("style").contains("block")){
			List<WebElement> objfilteredList = driver.findElements(statusXpath);
			for(WebElement obj:objfilteredList){
				if(obj.getText().equals(checkBoxLbl))
					result =  true;
				else{
					result =  false;
					break;
				}
			}
		}
		return result;
	}
	
	
	public boolean addInvoiceOrCreditMemo(String addItem, String subItem) throws Exception{
		boolean result = false;
		click(By.xpath("//*[@id='wrapper']//a[span[2][text()='Add']]"));
		click(By.xpath("//*[@id='wrapper']//a[span[2][text()='Add']]/following-sibling::div/div/div/span[text()='"+addItem+"']"));
		click(By.xpath("//*[@id='wrapper']//a[span[2][text()='Add']]/following-sibling::div/div/div[span[text()='"+addItem+"']]//a[span[text()='"+subItem+"']]"));
		try{
			if(subItem.equals("Against PO"))
				findElement(By.xpath("//div[contains(@class,'iConfirmBox')][//td[contains(text(),'You will be redirected to PO Listing')]]//span[text()='Continue']")).click();
				PurchaseOrder objPO = new PurchaseOrder(driver);
				if(findElement(objPO.getPOHeader()).getText() == "Purchase Orders")
					System.out.println("Redirected to Purchase Orders page");
				else
					System.out.println("Not Redirected to Purchase Orders page");
		}catch(Exception e){
			System.out.println("You will be directed to PO listing pop up not displayed");
		}
			
		return result;
	}
	
	
}
