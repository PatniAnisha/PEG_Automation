package com.zycus.eInvoice.Approval;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import Common.eInvoice_CommonFunctions;

/**
 * <p>
 * <b> Title: </b> Approval.java</br>
 * <br>
 * <b> Description: </b> Perform operations on a purchase order</br>
 * <br>
 * <b> Functions: </br>
 * </b> <br>
 * 1.filterByStatus: user shall be able to download PO as PDF </br>
 * <br>
 * 2.previewPOascXML: user shall be able to preview PO cXML </br>
 * <br>
 * 3.createShipmentNotice: user shall be able to create a shipment notice </br>
 * 
 * @author Anisha
 * @since April 2018
 */

public class Approval extends eInvoice_CommonFunctions {

	private WebDriver driver;
	private By processingLoader = By.id("workflowApproval_processing");
	private By statusXpath = By.xpath("//table[@id='workflowApproval']//td[2]/div");
	private By documentNoXpath = By.xpath("//table[@id='workflowApproval']//td[2]/div");
	private By dateXpath = By.xpath("//table[@id='workflowApproval']//td[contains(@class,'receivedOn')]");
	private By amountXpath = By.xpath("//table[@id='workflowApproval']//td[contains(@class,'entityAmount')]");
	private By filterBtnXpath = By.xpath(
			"//div[contains(@id,'qtip') and @aria-hidden='false']//div[contains(@class,'FilterBtnbx')]//a[text()='Filter']");
	private ExtentTest logger;

	/**
	 * Constructor for the class
	 * 
	 * @param driver
	 */

	public Approval(WebDriver driver, ExtentTest logger) {
		super(driver, logger);
		this.driver = driver;
		this.logger = logger;
	}

	
	public boolean performActionOnInvoice(String action) {
        boolean status = false;
        try {
              findElement(By.xpath("//*[@id='workflowApproval']//tr[1]/td[8]//a[text()='Actions']")).click();
              findElement(By.xpath("//*[@id='workflowApproval']//tr[1]//li/a[contains(text(),'" + action + "')]")).click();
              Thread.sleep(2000);
              switch (action) {
              case "Approve":
                    //TODO need to add logic to input invoice No
              //    if (findElement(By.id("approvedAmtForPaymentTxt0")).getAttribute("value") != null)
                    //    sendKeys(By.id("approvedAmtForPaymentTxt0"), "100");
                    sendKeys(By.id("approvalComments"), "approving the document");
                    findElement(By.xpath(".//*[@id='frmApprove']//input[contains(@class,'dev_approve')]")).click();
                    waitUntilVisibilityOfElement(By.xpath("//div[contains(@class,'globalMessage')]//span[contains(text(),'approved')]"));
                    //waitUntilInvisibilityOfElement(By.xpath("//*[@id='status_overlay_processingMain']/div"));
                    logger.log(LogStatus.INFO, "approved the invoice");
                    status = true;
                    break;
              case "Reject":
                    sendKeys(By.id("rejectComments"), "rejecting the document");
                    findElement(By.xpath("//*[@id='frmReject']//input[contains(@class,'dev_reject')]")).click();
                    waitUntilVisibilityOfElement(By.xpath("//div[contains(@class,'globalMessage')]//span[contains(text(),'rejected')]"));
              //      waitUntilInvisibilityOfElement(By.xpath("//*[@id='status_overlay_processingMain']/div"));
                    logger.log(LogStatus.INFO, "rejected the invoice");
                    status = true;
                    break;
              case "Delegate":
                    sendKeys(By.id("txtDelegateName"), "Chaitali");
                    Thread.sleep(2000);
                    findElement(By.xpath("//ul[contains(@style,'block')]/li")).click();
                    sendKeys(By.id("delegateComments"), "delegating the document");
                    findElement(By.id("btnDelegateSave")).click();
                    waitUntilVisibilityOfElement(By.xpath("//div[contains(@class,'globalMessage')]//span[contains(text(),'delegated')]"));
              //      waitUntilInvisibilityOfElement(By.xpath("//*[@id='status_overlay_processingMain']/div"));
                    logger.log(LogStatus.INFO, "delegated the invoice");
                    status = true;
                    break;
              default:
                    logger.log(LogStatus.INFO, "select the right option");
                    break;
              }

        } catch (Exception e) {

        }
        return status;
  }

	

	/**
	 * <b>Function:</b> filterByStatus
	 * 
	 * @author Varun Khurana
	 * @since April 2018
	 * @param checkBoxLbl
	 * @throws None
	 * @return result
	 * @throws Exception
	 */

	public boolean filterByStatus(String checkBoxLbl) throws Exception {
		boolean result = false;
		try{
			findElement(By.xpath("//th[contains(@class,'statusFilter')]//b")).click();
			result = filterByChkbox(checkBoxLbl, statusXpath)?true:false;
		}catch(Exception e){
			e.printStackTrace();
		}
		return result;
	}
	
	public boolean filterByCheckBoxCol(String colName, String checkBoxLbl){
		boolean result = false;
		try {
			int colPos = getColNum(colName);
			result = filterByChkbox1(colPos, checkBoxLbl, statusXpath)?true:false;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
		
	}
	
	public boolean filterByChkbox1(int colPos, String checkBoxLbl, By displayedLabel) throws Exception {
		boolean result = false;
		try {
			findElement(By.xpath("//table[@id='workflowApproval']//th["+colPos+"]//b")).click();
			Thread.sleep(3000);
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript(
					"var objContainer = document.evaluate(\"//div[contains(@class,'qtip qtip-default filterPopups') and contains(@style,'block')]\", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;"
							+ "document.evaluate(\".//div[contains(@id,'qtip')]//input[following-sibling::text()[contains(.,'"
							+ checkBoxLbl
							+ "')]]\", objContainer, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click()");
			findElement(filterBtnXpath).click();
			waitUntilInvisibilityOfElement(processingLoader);
			List<WebElement> objfilteredList = driver.findElements(displayedLabel);
			for (WebElement obj : objfilteredList) {
				if (obj.getText().equals(checkBoxLbl))
					result = true;
				else {
					result = false;
					break;
				}
			}
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception();
		}
	}

	/**
	 * <b>Function:</b> filterByReceivedOn
	 * 
	 * @author Varun Khurana
	 * @since April 2018
	 * @param fromDt,
	 *            ToDt
	 * @return result
	 * @throws Exception
	 */

	/*private boolean filterByReceivedOn(Date fromDt, Date ToDt) throws Exception {
		boolean result = false;
		findElement(By.xpath("//th[contains(@class,'receivedOnFilter')]//b")).click();
		filterByDateRange(fromDt, ToDt);
		waitUntilInvisibilityOfElement(processingLoader);
		List<WebElement> objfilteredDateList = driver.findElements(dateXpath);
		for (WebElement obj : objfilteredDateList) {
			DateFormat format = new SimpleDateFormat("dd/mm/yyyy");
			Date dt = format.parse(obj.getText());
			if (dt.compareTo(fromDt) >= 0 && dt.compareTo(ToDt) <= 0)
				result = true;
			else {
				result = false;
				break;
			}
		}
		return result;
	}*/
	
	private boolean filterByReceivedOn(Date fromDt, Date ToDt) throws Exception {
		boolean result = false;
		try{
			findElement(By.xpath("//th[contains(@class,'receivedOnFilter')]//b")).click();
			result = filterByDateRange(fromDt, ToDt, dateXpath)?true:false;
		}catch(Exception e){
			e.printStackTrace();
		}
		return result;
	}

	/**
	 * <b>Function:</b> filterByAmountToApprove
	 * 
	 * @author Varun Khurana
	 * @since April 2018
	 * @param fromDt,ToDt
	 * @return result
	 * @throws Exception
	 */

	public boolean filterByAmountToApprove(float fromAmt, float ToAmt) throws Exception {
		boolean result = false;
		try {
			findElement(By.xpath("//th[contains(@class,'amountFilter')]//b")).click();
			result = filterByAmtRange(fromAmt, ToAmt, amountXpath) ? true : false;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	/**
	 * <b>Function:</b> filterByAmountToApprove
	 * 
	 * @author Varun Khurana
	 * @since April 2018
	 * @param fromDt,
	 *            ToDt, currType
	 * @return result
	 * @throws Exception
	 */

	public boolean filterByAmountToApprove(float fromAmt, float ToAmt, String currType) throws Exception {
		boolean result = false;
		try {
			findElement(By.xpath("//th[contains(@class,'amountFilter')]//b")).click();
			result = filterByAmtRange(fromAmt, ToAmt, currType, amountXpath) ? true : false;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	/**
	 * <b>Function:</b> filterBySupplier
	 * 
	 * @author Varun Khurana
	 * @since April 2018
	 * @param supplier
	 * @throws ParseException
	 * @return result
	 */

	public boolean filterBySupplier(String supplier) throws ParseException {
		boolean result = false;
		try {
			result = filterByText("Supplier", supplier) ? true : false;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	/**
	 * <b>Function:</b> filterByDocumentNo
	 * 
	 * @author Varun Khurana
	 * @since April 2018
	 * @param checkBoxLbl
	 * @throws ParseException
	 * @return result
	 * @throws Exception
	 */

	public boolean filterByDocumentNo(String checkBoxLbl) throws Exception {
		boolean result = false;
		try {
			findElement(By.xpath("//th[contains(@class,'numberFilter')]//b")).click();
			findElement(By.xpath("(//div[contains(@id,'qtip')]//input[following-sibling::text()[contains(.,'"
					+ checkBoxLbl + "')]])[1]")).click();
			findElement(filterBtnXpath).click();
			waitUntilInvisibilityOfElement(processingLoader);
			List<WebElement> objfilteredList = driver.findElements(documentNoXpath);
			for (WebElement obj : objfilteredList) {
				if (obj.getText().equals(checkBoxLbl))
					result = true;
				else {
					result = false;
					break;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	/**
	 * <b>Function:</b> filterByDocumentNo
	 * 
	 * @author Varun Khurana
	 * @since April 2018
	 * @param checkBoxLbl,
	 *            invoiceNo
	 * @throws ParseException
	 * @return result
	 * @throws Exception
	 */

	public boolean filterByDocumentNo(String checkBoxLbl, String invoiceNo) throws Exception {
		boolean result = false;
		try {
			findElement(By.xpath("//th[contains(@class,'numberFilter')]//b")).click();
			sendKeys(By.id("txtFltrInvoiceNum"), invoiceNo);
			findElement(By.xpath("(//div[contains(@id,'qtip')]//input[following-sibling::text()[contains(.,'"
					+ checkBoxLbl + "')]])[1]")).click();
			findElement(filterBtnXpath).click();
			waitUntilInvisibilityOfElement(processingLoader);
			List<WebElement> objfilteredList = driver.findElements(documentNoXpath);
			for (WebElement obj : objfilteredList) {
				if (obj.getText().equals(invoiceNo))
					result = true;
				else {
					result = false;
					break;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

}
