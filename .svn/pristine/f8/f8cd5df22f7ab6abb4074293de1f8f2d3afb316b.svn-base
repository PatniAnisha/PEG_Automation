package Common;

import java.text.ParseException;
import java.util.Date;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import Framework.CommonUtility;

public class eInvoice_CommonFunctions extends CommonUtility{
	
	private WebDriver driver;
	
	private By filterAppliedIconXpath	   = By.xpath("//span[@class='icon fltr-clear' and contains(@style,'inline')]");
	private By processingLoader 		   = By.xpath("//*[contains(@id,'List_processing')]");

	private By filterBtnXpath 	   		   = By.xpath("//div[contains(@id,'qtip') and @aria-hidden='false']//div[contains(@class,'FilterBtnbx')]//a[text()='Filter']");
	private By fromDtPickBtnXpath 		   = By.xpath("(//img[@class='ui-datepicker-trigger'])[1]");
	private By ToDtPickBtnXpath 		   = By.xpath("(//img[@class='ui-datepicker-trigger'])[2]");
	private By minAmtInputXpath 		   = By.xpath("//div[contains(@id,'qtip')]//input[contains(@class, 'minAmount')]");
	private By maxAmtInputXpath 		   = By.xpath("//div[contains(@id,'qtip')]//input[contains(@class, 'maxAmount')]");
	private By clrAllFiltersIconXpath	   = By.xpath("//span[contains(@class,'clearAllFilters')]");
	
	public eInvoice_CommonFunctions(WebDriver driver) {
		super(driver);
		this.driver = driver;
	}
	
	
	/**
	 * ---------------------------------------------------------------------------------
	 * Function : clrAllFilters
	 * @return result
	 * ---------------------------------------------------------------------------------
	 */
	
	public boolean clrAllFilters(){
		boolean result = false;
		
		clearAllFilters();
		if(findElement(processingLoader).getAttribute("style").contains("block")){
			List<WebElement> objfilterIconsList = driver.findElements(filterAppliedIconXpath);
			if(objfilterIconsList.size()==0)
				result =  true;
			else
				result =  false;
		}
		return result;
		
	}
	
	/**
	 * ---------------------------------------------------------------------------------
	 * Function : clearAllFilters
	 * @return funcCompletion
	 * ---------------------------------------------------------------------------------
	 */
	
	private void clearAllFilters(){
		WebElement objClrFilter = driver.findElement(clrAllFiltersIconXpath);
		if(objClrFilter.getAttribute("style").contains("block"))
			objClrFilter.click();
	}
	
	/**
	 * <b>Function:</b> filterByText
	 * 
	 * @author Varun Khurana
	 * @since April 2018
	 * @param fieldName
	 * @param searchValue
	 * @return result - True/False
	 */

	public boolean filterByText(String fieldName, String searchValue) {
		boolean result = false;
		try {
			int intColNo = getColNum(fieldName);
			findElement(By.xpath("//thead/tr[2]/th[" + intColNo + "]//input")).sendKeys(searchValue + Keys.ENTER);
			if (findElement(processingLoader).getAttribute("style").contains("block")) {
				List<WebElement> objfilteredTxtList = driver.findElements(By.xpath("//tbody//td[" + intColNo + "]"));
				for (WebElement obj : objfilteredTxtList) {
					if (obj.getText().contains(searchValue))
						result = true;
					else {
						result = false;
						break;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	private int getColNum(String fieldName){
		int intColNum = 0;
		try{
			List<WebElement> headerList = driver.findElements(By.xpath("//thead/tr[1]/th/div/text()"));
			for(WebElement header : headerList){
				intColNum++;
				if(header.getText().equals(fieldName))
					break;
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return intColNum;
	}

	/**
	 *--------------------------------------------------------------------------------- 
	 * Function : filterByChkbox
	 * @param checkBoxLbl
	 * ---------------------------------------------------------------------------------
	 */
	
	public void filterByChkbox(String checkBoxLbl){
		driver.findElement(By.xpath("(//div[contains(@id,'qtip')]//input[following-sibling::text()[contains(.,'"+checkBoxLbl+"')]])[1]")).click();
		driver.findElement(filterBtnXpath).click();
	}
	
	/**
	 * --------------------------------------------------------------------------------- 
	 * Function : filterByDateRange
	 * @param fromDt
	 * @param ToDt
	 * ---------------------------------------------------------------------------------
	 */
	
	
	public void filterByDateRange(Date fromDt, Date ToDt) throws ParseException{
		
		driver.findElement(fromDtPickBtnXpath).click();
		this.selectDate(fromDt);
		driver.findElement(ToDtPickBtnXpath).click();
		this.selectDate(ToDt);
		driver.findElement(filterBtnXpath).click();
	}
	
	/**
	 *--------------------------------------------------------------------------------- 
	 * Function : filterByAmtRange
	 * @param typeValue
	 * @return funcCompletion
	 * @throws ParseException 
	 * ---------------------------------------------------------------------------------
	 */
	
	
	public void filterByAmtRange(float fromAmt, float ToAmt){
		driver.findElement(minAmtInputXpath).sendKeys(String.valueOf(fromAmt));
		driver.findElement(maxAmtInputXpath).sendKeys(String.valueOf(ToAmt));
		driver.findElement(filterBtnXpath).click();
	}
	
	/**
	 *--------------------------------------------------------------------------------- 
	 * Function : filterByAmtRange
	 * @param typeValue
	 * @return funcCompletion
	 * @throws ParseException 
	 * ---------------------------------------------------------------------------------
	 */
	
	public void filterByAmtRange(float fromAmt, float ToAmt, String currType){
		driver.findElement(minAmtInputXpath).sendKeys(String.valueOf(fromAmt));
		driver.findElement(maxAmtInputXpath).sendKeys(String.valueOf(ToAmt));
		driver.findElement(By.xpath("//div[contains(@id,'qtip')]//input[contains(@class, 'inputCurrencies') and @value ='"+currType+"']")).click();
		driver.findElement(filterBtnXpath).click();
	}
}
