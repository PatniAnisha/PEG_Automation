package com.zycus.eInvoice.Invoice;

import java.util.Date;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Assert;

import Common.eInvoice_CommonFunctions;

public class NewRecurringContract extends eInvoice_CommonFunctions{

	private WebDriver driver;
	private String searchValue;
	private String paymentTerms;
	private String contractName;
	private String contractOwner;
	private String autoInvoiceNo;
	private String purchaseType;
	private String frequencyNo;
	private String frequency;
	private Date fromDt;
	private String weekDay;

	public NewRecurringContract(WebDriver driver, String searchValue, String paymentTerms, String contractName, String contractOwner, String autoInvoiceNo, String purchaseType, String frequencyNo, String frequency, Date fromDt, String weekDay) {
		super(driver);
		this.driver = driver;
		this.searchValue = searchValue;
		this.paymentTerms = paymentTerms;
		this.contractName = contractName;
		this.contractOwner = contractOwner;
		this.autoInvoiceNo = autoInvoiceNo;
		this.purchaseType = purchaseType;
		this.frequencyNo = frequencyNo;
		this.frequency = frequency;
		this.fromDt = fromDt;
		this.weekDay = weekDay;
	}
	
	public boolean enterSupplierInfo(String searchType) throws Exception{
		boolean result =  false;
		
		WebElement paymentTerms = findElement(By.xpath("//select[@id='slctPaymentTerms'][@disabled]"));
		WebElement address = findElement(By.xpath("//select[@id='slctSupplierAddress'][@disabled]"));
		WebElement remitToAddr = findElement(By.xpath("//select[@id='slctSupplierAddressRemit'][@disabled]"));
		WebElement currency = findElement(By.xpath("//select[@id='txtSupplierCurrency'][@disabled]"));
		WebElement suppContact = findElement(By.xpath("//select[@id='txtSupplierContact'][@disabled]"));

		findElement(By.xpath("//*[@id='supplierNameDropdown']/div/a[span[text()='"+searchType+"']]")).click();
		findElement(By.id("txtSupplierName")).sendKeys(searchValue);
		if(findElement(By.xpath("//form[@id='frmInvoice']/ul[contains(@style,'block')]"))!=null){
			click(By.xpath("//form[@id='frmInvoice']/ul[contains(@style,'block')]/li[1]"));
			Assert.assertNull(paymentTerms);
			Assert.assertNull(address);
			Assert.assertNull(remitToAddr);
			Assert.assertNull(currency);
			Assert.assertNull(suppContact);
			click(By.xpath("//select[@id='slctPaymentTerms']/option[text()='"+paymentTerms+"']"));
			result = true;
		}
		return result;
	} 
	
	public boolean enterContractDetails(String buyer, String requester, String notes, String description) throws Exception{
		boolean result =  false;
		findElement(By.id("txtContractName")).sendKeys(contractName);
		findElement(By.id("txtBuyer")).sendKeys(buyer);
		findElement(By.id("txtContractOwner")).sendKeys(contractOwner);
		findElement(By.id("txtRequester")).sendKeys(requester);
		findElement(By.id("txtAutoInvoiceNo")).sendKeys(autoInvoiceNo);
		click(By.xpath("//select[@id='slctPurchaseType']/option[text()='"+purchaseType+"']"));
		findElement(By.id("txtInvoiceComments")).sendKeys(notes);
		findElement(By.id("txtDescription")).sendKeys(description);
		result = true;
		return result;
	}
	
	public boolean enterReleaseSchedule() throws Exception{
		boolean result =  false;
		findElement(By.id("txtFrequencyOccurance")).sendKeys(frequencyNo);
		click(By.xpath("//select[@id='txtFrequencyBy']/option[text()='"+frequency+"']"));
		click(By.id("txtFromDate"));
		selectDate(fromDt);
		click(By.id("txtNeverExpires"));
		click(By.xpath("//select[@id='txtDayOfWeek']/option[text()='weekDay']"));
		result = true;
		return result;
	}
	
	public boolean enterReleaseSchedule(Date ToDt) throws Exception{
		boolean result =  false;
		findElement(By.id("txtFrequencyOccurance")).sendKeys(frequencyNo);
		click(By.xpath("//select[@id='txtFrequencyBy']/option[text()='"+frequency+"']"));
		click(By.id("txtFromDate"));
		selectDate(fromDt);
		click(By.id("txtToDate"));
		selectDate(ToDt);
		click(By.xpath("//select[@id='txtDayOfWeek']/option[text()='weekDay']"));
		result = true;
		return result;
	}
	
	public boolean editBillingCostBookingInfo(String billingCompany, String billingBusinessUnit, String billingLocation, String CBCostCenter, String CBProject) throws Exception{
		boolean result =  false;
		click(By.id("changeDelBillingSumm"));
		ContractSummary objContractSumm = new ContractSummary(driver, billingCompany, billingBusinessUnit, billingLocation, CBCostCenter, CBProject);
		
		result = true;
		return result;
	}
	
	
	 
	


}
